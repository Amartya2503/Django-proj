from django.http import JsonResponse,HttpResponse
from rest_framework.response import Response    
from rest_framework.decorators import api_view,parser_classes
from django.core.mail import send_mail
import random as r
from rest_framework.views import APIView
from rest_framework.generics import GenericAPIView
from django.contrib.auth import authenticate, login, logout 
from django.contrib.auth.models import AbstractBaseUser

from django.core.exceptions import ObjectDoesNotExist

from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from rest_framework_simplejwt.views import TokenObtainPairView
from rest_framework.parsers import MultiPartParser
from rest_framework import status

from apiapp.models import *
from .serializers import UserSerializer,dataSerializer,taskSerializer
# from django


class MyTokenObtainPairSerializer(TokenObtainPairSerializer):
    @classmethod
    def get_token(cls, user):
        token = super().get_token(user)
        
        # Add custom claims
        token['email'] = user.email
        token['username'] = user.username
        # ...
        i = r.randint(10000,100000)
        send_mail(
            'HELLO this is an autogenerated mail',
            'this mail signifies that you have logged in to the app\nYour OTP is:'+str(i),
            'amart@mail.com',
            [user.email],
            fail_silently=False,

        )
        print(token['username'])
        return token

class MyTokenObtainPairView(TokenObtainPairView):
    serializer_class = MyTokenObtainPairSerializer


class registerAPIView(GenericAPIView):
   
    serializer_class = UserSerializer   
    def get(self,request):
        instance2= newuser.object.all()
        for i in instance2:
            print(i.username)
        return Response('please enter the user data to register')
    def post(self,request):
        serializer= UserSerializer(data = request.data)
        if serializer.is_valid():
            # print(serializer.data)
            serializer.password = serializer.set_password(serializer.password)
            serializer.create(validated_data=serializer.data)            
            return Response("you have reached here yay ")
            
        else:
            print(serializer.error_messages)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
            # return Response("yessss this error is handled by drf")
        # username = request.data['username']
        # password = request.data['password']
        # print(username,password)
        # # user= authenticate(username = username, password = password)
        # return Response('you have sent login request')
       


class UserAPIView(APIView):
    # def get(self,request,pk):
    #     try:
    #         instance = newuser.object.get(email = pk)
    #     except:
    #         return Response('no user found')
    #     serializer = UserSerializer(instance)
    #     return Response(serializer.data)

    def post(self,request):
        serializer = UserSerializer(data=request.data)

        if serializer.is_valid():
            account=serializer.save()
            account.is_active = True
            account.save()
            return Response(serializer.data,status = status.HTTP_201_CREATED)
        return Response(serializer.errors,status=status.HTTP_400_BAD_REQUEST)






#----------info data views here ---------------

class infodataAPIView(GenericAPIView):
    serializer_class = dataSerializer
    def get(self,request,pk):
        try:
            instance = infodata.objects.get(data_id = pk)
            instance.views +=1
            instance.save()
            serializer = dataSerializer(instance)
            return Response(serializer.data)

        except ObjectDoesNotExist:
            return Response("no such data piece exist ")

    def post(self,request,pk):
        serializer=dataSerializer(data = request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data,status = status.HTTP_201_CREATED)
        else:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


#----------this manages tasks-----------#


class taskAPIView(GenericAPIView):
    serializer_class = taskSerializer
    queryset = tasks.objects.all()
    def get(self,request):
        queryset = tasks.objects.all()
        serializer = taskSerializer(queryset,many = True)
        return Response(serializer.data)

    def post(self,request):
        serializer = taskSerializer(data = request.data)
        if serializer.is_valid():
            serializer.save()
            queryset = tasks.objects.all()
            serializer1 = taskSerializer(queryset,many = True)
            return Response(serializer1.data,status = status.HTTP_201_CREATED)
        else:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class taskupdateAPIView(GenericAPIView):
    serializer_class = taskSerializer
    def get_object(self,id):
        try:
            return tasks.objects.get(taskid = id)
        except ObjectDoesNotExist:
            return HttpResponse(status = status.HTTP_404_NOT_FOUND)
    
    def get(self,request,pk):

        task = self.get_object(pk)
        serializer = taskSerializer(task)
        return Response(serializer.data)
    
    def put(self,request,pk):
        task = self.get_object(pk)
        serializer = taskSerializer(task, data = request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data,status = status.HTTP_200_OK)
        return Response(serializer.errors,status = status.HTTP_400_BAD_REQUEST)

    def delete(self,request,pk):
        task = self.get_object(pk)
        task.delete()
        return Response(status = status.HTTP_204_NO_CONTENT)

#----------------------

@api_view(['GET'])
def getroutes(request):
    i = r.randint(10000,100000)
    routes =[
        'api/token',
        'api/token/refresh',
        str(i),

    ]

    return Response(routes)

@api_view(['GET'])
def getuser(request,pk):
    print(newuser.object.all())
    try:
        instance = newuser.object.get(email = pk)
    except:
        return Response('no user found')
    serializer = UserSerializer(instance)
    return Response(serializer.data)


@api_view(['GET'])
def getall(request):
    instance = newuser.object.all()
    serializer = UserSerializer(instance,many = True)
    return Response(serializer.data,)


@api_view(['GET','POST'])
def assigntask(request,pk1):
    try :

        user = newuser.object.get(email = pk1)
        # if user['category'] = '':
        name = user['name']
        return Response(name)


    except:

        return Response('no user found')
        # instance = newuser.object.get(email = pk1)
        # name = instance['name']
        # return Response(name)